[
    {
        "id": "09a6d2bc18a9577a",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dd6611e2b162c883",
        "type": "mqtt in",
        "z": "09a6d2bc18a9577a",
        "name": "",
        "topic": "network_status",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "1cb494e37798adb3",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 440,
        "wires": [
            [
                "9b1f923a21fabe5e",
                "4fe7e7b5b3312e2b",
                "a3724a9eb98812bc",
                "69b9c6b7d7df15fa"
            ]
        ]
    },
    {
        "id": "4b8fa8b4dad50ad4",
        "type": "mqtt out",
        "z": "09a6d2bc18a9577a",
        "name": "",
        "topic": "network_status",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "1cb494e37798adb3",
        "x": 460,
        "y": 80,
        "wires": []
    },
    {
        "id": "69b9c6b7d7df15fa",
        "type": "debug",
        "z": "09a6d2bc18a9577a",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 480,
        "wires": []
    },
    {
        "id": "fe7709484c22f7c6",
        "type": "mqtt out",
        "z": "09a6d2bc18a9577a",
        "name": "BLE Target Output Node",
        "topic": "from_dashboard",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "1cb494e37798adb3",
        "x": 2090,
        "y": 520,
        "wires": []
    },
    {
        "id": "b1c45c7c02d513b9",
        "type": "inject",
        "z": "09a6d2bc18a9577a",
        "name": "Standard 5 Node Message",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Topic 1",
        "payload": "[{\"pos\":\"0\",\"address\":\"1234\",\"next-hop\":\"1234\",\"hop_count\":\"1\",\"role\":\"Role 1\",\"broker\":\"192.168.1.1\",\"BLE Devices\":[\"AA:BB:CC:DD:EE:01\",\"AA:BB:CC:DD:EE:02\",\"AA:BB:CC:DD:EE:03\"]},{\"pos\":\"1\",\"address\":\"4321\",\"next-hop\":\"1234\",\"hop_count\":\"2\",\"role\":\"Role 2\",\"broker\":\"0.0.0.0\"},{\"pos\":\"2\",\"address\":\"A9F0\",\"next-hop\":\"1234\",\"hop_count\":\"2\",\"role\":\"Role 0\",\"broker\":\"192.168.1.10\",\"BLE Devices\":[\"AA:BB:CC:DD:EE:05\",\"AA:BB:CC:DD:EE:06\"]},{\"pos\":\"3\",\"address\":\"C001\",\"next-hop\":\"via B007\",\"hop_count\":\"4\",\"role\":\"Role 2\",\"broker\":\"192.168.2.1\",\"BLE Devices\":[\"AA:BB:CC:DD:EE:07\",\"AA:BB:CC:DD:EE:08\",\"AA:BB:CC:DD:EE:09\"]}]",
        "payloadType": "json",
        "x": 250,
        "y": 80,
        "wires": [
            [
                "4b8fa8b4dad50ad4"
            ]
        ]
    },
    {
        "id": "52e329c6a7b14e90",
        "type": "debug",
        "z": "09a6d2bc18a9577a",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 1020,
        "wires": []
    },
    {
        "id": "208ca6fb7cef344d",
        "type": "function",
        "z": "09a6d2bc18a9577a",
        "name": "Converts the BLE devices section into a set of records ",
        "func": "let record = msg.payload; // Expecting a network status record with/without BLE\nlet outputMsgs = [];\nlet ble_payload = [];\n\n// Process each routing record\n// If BLE Devices exist split it from the rest of the record and then send it \nif (record[\"BLE Devices\"]) {\n    // add broker to device table\n    if (record[\"broker\"] !== \"0.0.0.0\") {\n        ble_payload.push({\n            name: \"MQTT Broker\",\n            device: record[\"broker\"],\n            address: record[\"address\"]\n            });\n    }\n\n    for (const device of record[\"BLE Devices\"]) {\n        ble_payload.push({\n            name: `BLE`,\n            device: device,\n            address: record[\"address\"]\n        });\n    }\n\n    // ble_payload.push({\n    //         name: `BLE`,\n    //         device: record[\"BLE Devices\"],\n    //         address: record[\"address\"]\n    // });\n\n    outputMsgs.push({\n        topic: `ble_${record.address}`,\n        payload: ble_payload\n    });\n    \n    delete record[\"BLE Devices\"];   // removes BLE device from original set\n} else {\n    outputMsgs.push({\n        topic: `ble_${record.address}`,\n        payload: []\n    })\n}\n// if broker is 0.0.0.0, it is missing \nif (record[\"broker\"] === \"0.0.0.0\") {\n    record[\"broker_status\"] = \"Offline\";\n} else {\n    record[\"broker_status\"] = \"Online\";\n}\n\noutputMsgs.push({\n    topic: `status_${record.address}`,\n    payload: record\n});\n\n// Return messages to multiple outputs\nreturn [outputMsgs];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 320,
        "wires": [
            [
                "025a024b7205bb63",
                "37e227f996d5d3b2",
                "2e72b387d2d07324"
            ]
        ]
    },
    {
        "id": "025a024b7205bb63",
        "type": "switch",
        "z": "09a6d2bc18a9577a",
        "name": "BLE Address Splitter",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ble_1234",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ble_4321",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ble_A9F0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ble_C001",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 1100,
        "y": 520,
        "wires": [
            [
                "d91dba7b4446ccb3"
            ],
            [
                "b8d47d1e31641815"
            ],
            [
                "c947a368c1a3d8d8"
            ],
            [
                "c70faf5851a01522"
            ],
            [
                "73fe5773460ad388"
            ]
        ]
    },
    {
        "id": "73fe5773460ad388",
        "type": "debug",
        "z": "09a6d2bc18a9577a",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1480,
        "y": 860,
        "wires": []
    },
    {
        "id": "9b1f923a21fabe5e",
        "type": "split",
        "z": "09a6d2bc18a9577a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 370,
        "y": 400,
        "wires": [
            [
                "208ca6fb7cef344d"
            ]
        ]
    },
    {
        "id": "37e227f996d5d3b2",
        "type": "debug",
        "z": "09a6d2bc18a9577a",
        "name": "All BLE/Status Records",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 80,
        "wires": []
    },
    {
        "id": "2e72b387d2d07324",
        "type": "switch",
        "z": "09a6d2bc18a9577a",
        "name": "Status Address Splitter",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "status_1234",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "status_4321",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "status_A9F0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "status_C001",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 1100,
        "y": 220,
        "wires": [
            [
                "3a3e3b57f5ab8987"
            ],
            [
                "063e96a60d58ecce"
            ],
            [
                "e01ed2b09dda2c69"
            ],
            [
                "1832b07a0e3e011d"
            ],
            []
        ]
    },
    {
        "id": "91381bfaf442e7a9",
        "type": "ui-table",
        "z": "09a6d2bc18a9577a",
        "group": "e92834523671ca8a",
        "name": "Combined Nodes Routing Table",
        "label": "Node Routing Table",
        "order": 1,
        "width": 0,
        "height": 0,
        "maxrows": 0,
        "passthru": false,
        "autocols": false,
        "showSearch": false,
        "selectionType": "click",
        "columns": [
            {
                "title": "Node Position",
                "key": "pos",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "Address",
                "key": "address",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "Next-Hop",
                "key": "next-hop",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "Hop Count",
                "key": "hop_count",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "Role",
                "key": "role",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "Broker",
                "key": "broker",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            }
        ],
        "mobileBreakpoint": "sm",
        "mobileBreakpointType": "defaults",
        "action": "replace",
        "x": 930,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "d91dba7b4446ccb3",
        "type": "ui-table",
        "z": "09a6d2bc18a9577a",
        "group": "a038e927d4093482",
        "name": "Lilygo 1234 Devices Panel",
        "label": "Connected Devices",
        "order": 2,
        "width": 0,
        "height": 0,
        "maxrows": 0,
        "passthru": false,
        "autocols": false,
        "showSearch": true,
        "selectionType": "none",
        "columns": [
            {
                "title": "Device Name",
                "key": "name",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "Address",
                "key": "device",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "",
                "key": "Ping",
                "keyType": "str",
                "type": "button",
                "width": "",
                "align": "start"
            }
        ],
        "mobileBreakpoint": "sm",
        "mobileBreakpointType": "defaults",
        "action": "replace",
        "x": 1420,
        "y": 420,
        "wires": [
            [
                "73fe5773460ad388",
                "0d581ac8f01c6ab6"
            ]
        ]
    },
    {
        "id": "3a3e3b57f5ab8987",
        "type": "ui-markdown",
        "z": "09a6d2bc18a9577a",
        "group": "a038e927d4093482",
        "name": "Lilygo 1234 Status",
        "order": 1,
        "width": 0,
        "height": 0,
        "content": "# Node {{msg.payload.address}} Information\n- Address: {{msg.payload.address}}\n- Next Hop: {{msg.payload[\"next-hop\"]}}\n- Hop Count: {{msg.payload.hop_count}}\n- Role: {{msg.payload.role}}\n- Broker: {{msg.payload.broker}}\n- Broker Status: {{msg.payload.broker_status}}\n# ",
        "className": "",
        "x": 1390,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "0d581ac8f01c6ab6",
        "type": "function",
        "z": "09a6d2bc18a9577a",
        "name": "Convert table address to mqtt payload",
        "func": "let msg_payload = {};\n\n// set payload fields\nmsg_payload[\"address\"] = msg.payload[\"address\"];\nif (msg.payload[\"name\"] === \"MQTT Broker\"){\n    msg_payload[\"end_device_type\"] = 0;\n} else {\n    msg_payload[\"end_device_type\"] = 1;\n}\nmsg_payload[\"device_id\"] = msg.payload.node;\nmsg_payload[\"payload\"] = \"hallo\";\n// Add current time (ISO format)\nmsg_payload[\"time\"] = new Date().toISOString();\n\nreturn {\n    topic: \"general\",\n    payload: msg_payload\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 520,
        "wires": [
            [
                "fe7709484c22f7c6"
            ]
        ]
    },
    {
        "id": "063e96a60d58ecce",
        "type": "ui-markdown",
        "z": "09a6d2bc18a9577a",
        "group": "619b22480b24dccb",
        "name": "Lilygo 4321 Status",
        "order": 1,
        "width": 0,
        "height": 0,
        "content": "# Node {{msg.payload.address}} Information\n- Address: {{msg.payload.address}}\n- Next Hop: {{msg.payload[\"next-hop\"]}}\n- Hop Count: {{msg.payload.hop_count}}\n- Role: {{msg.payload.role}}\n- Broker: {{msg.payload.broker}}\n- Broker Status: {{msg.payload.broker_status}}\n# ",
        "className": "",
        "x": 1390,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "b8d47d1e31641815",
        "type": "ui-table",
        "z": "09a6d2bc18a9577a",
        "group": "619b22480b24dccb",
        "name": "Lilygo 4321 Devices Panel",
        "label": "Connected Devices",
        "order": 2,
        "width": 0,
        "height": 0,
        "maxrows": 0,
        "passthru": false,
        "autocols": false,
        "showSearch": true,
        "selectionType": "none",
        "columns": [
            {
                "title": "Device Name",
                "key": "name",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "Address",
                "key": "device",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "",
                "key": "Ping",
                "keyType": "str",
                "type": "button",
                "width": "",
                "align": "start"
            }
        ],
        "mobileBreakpoint": "sm",
        "mobileBreakpointType": "defaults",
        "action": "replace",
        "x": 1420,
        "y": 480,
        "wires": [
            [
                "0d581ac8f01c6ab6"
            ]
        ]
    },
    {
        "id": "b3f0b0d796549477",
        "type": "function",
        "z": "09a6d2bc18a9577a",
        "name": "Get all devices ",
        "func": "let deviceList = [];\nlet outputMsg = [];\n\nfor (const node of msg.payload) {\n    const address = node[\"address\"] || \"unknown\";\n\n    // Add broker to device table if valid\n    if (node[\"broker\"] && node[\"broker\"] !== \"0.0.0.0\") {\n        deviceList.push({\n            name: \"MQTT Broker\",\n            device: node[\"broker\"],\n            address: address\n        });\n    }\n\n    // Add BLE devices to table\n    if (Array.isArray(node[\"BLE Devices\"])) {\n        for (const device of node[\"BLE Devices\"]) {\n            deviceList.push({\n                name: \"BLE\",\n                device: device,\n                address: address\n            });\n        }\n    }\n}\n\noutputMsg.push({\n    topic: \"devices\",\n    payload: deviceList\n});\n\nreturn outputMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 600,
        "wires": [
            [
                "1ad02813dd068bc5"
            ]
        ]
    },
    {
        "id": "c947a368c1a3d8d8",
        "type": "ui-table",
        "z": "09a6d2bc18a9577a",
        "group": "c9e128aa2ab502c6",
        "name": "Lilygo A9F0 Devices Panel",
        "label": "Connected Devices",
        "order": 2,
        "width": 0,
        "height": 0,
        "maxrows": 0,
        "passthru": false,
        "autocols": false,
        "showSearch": true,
        "selectionType": "none",
        "columns": [
            {
                "title": "Device Name",
                "key": "name",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "Address",
                "key": "device",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "",
                "key": "Ping",
                "keyType": "str",
                "type": "button",
                "width": "",
                "align": "start"
            }
        ],
        "mobileBreakpoint": "sm",
        "mobileBreakpointType": "defaults",
        "action": "replace",
        "x": 1420,
        "y": 540,
        "wires": [
            [
                "0d581ac8f01c6ab6"
            ]
        ]
    },
    {
        "id": "c70faf5851a01522",
        "type": "ui-table",
        "z": "09a6d2bc18a9577a",
        "group": "243ed2f1bc512451",
        "name": "Lilygo A9F0 Devices Panel",
        "label": "Connected Devices",
        "order": 2,
        "width": 0,
        "height": 0,
        "maxrows": 0,
        "passthru": false,
        "autocols": false,
        "showSearch": true,
        "selectionType": "none",
        "columns": [
            {
                "title": "Device Name",
                "key": "name",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "Address",
                "key": "device",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "",
                "key": "Ping",
                "keyType": "str",
                "type": "button",
                "width": "",
                "align": "start"
            }
        ],
        "mobileBreakpoint": "sm",
        "mobileBreakpointType": "defaults",
        "action": "replace",
        "x": 1420,
        "y": 600,
        "wires": [
            [
                "73fe5773460ad388",
                "0d581ac8f01c6ab6"
            ]
        ]
    },
    {
        "id": "e01ed2b09dda2c69",
        "type": "ui-markdown",
        "z": "09a6d2bc18a9577a",
        "group": "c9e128aa2ab502c6",
        "name": "Lilygo A9F0 Status",
        "order": 1,
        "width": 0,
        "height": 0,
        "content": "# Node {{msg.payload.address}} Information\n- Address: {{msg.payload.address}}\n- Next Hop: {{msg.payload[\"next-hop\"]}}\n- Hop Count: {{msg.payload.hop_count}}\n- Role: {{msg.payload.role}}\n- Broker: {{msg.payload.broker}}\n- Broker Status: {{msg.payload.broker_status}}\n# ",
        "className": "",
        "x": 1390,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "1832b07a0e3e011d",
        "type": "ui-markdown",
        "z": "09a6d2bc18a9577a",
        "group": "243ed2f1bc512451",
        "name": "Lilygo C001 Status",
        "order": 1,
        "width": 0,
        "height": 0,
        "content": "# Node {{msg.payload.address}} Information\n- Address: {{msg.payload.address}}\n- Next Hop: {{msg.payload[\"next-hop\"]}}\n- Hop Count: {{msg.payload.hop_count}}\n- Role: {{msg.payload.role}}\n- Broker: {{msg.payload.broker}}\n- Broker Status: {{msg.payload.broker_status}}\n# ",
        "className": "",
        "x": 1390,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "1ad02813dd068bc5",
        "type": "ui-table",
        "z": "09a6d2bc18a9577a",
        "group": "e92834523671ca8a",
        "name": "All Devices Panel",
        "label": "Connected Devices",
        "order": 2,
        "width": 0,
        "height": 0,
        "maxrows": 0,
        "passthru": false,
        "autocols": false,
        "showSearch": true,
        "selectionType": "none",
        "columns": [
            {
                "title": "Device Name",
                "key": "name",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "Address",
                "key": "device",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "Node",
                "key": "address",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "",
                "key": "Ping",
                "keyType": "str",
                "type": "button",
                "width": "",
                "align": "start"
            }
        ],
        "mobileBreakpoint": "sm",
        "mobileBreakpointType": "defaults",
        "action": "replace",
        "x": 950,
        "y": 600,
        "wires": [
            [
                "0d581ac8f01c6ab6"
            ]
        ]
    },
    {
        "id": "8f7abceb9ebd54d8",
        "type": "mqtt in",
        "z": "09a6d2bc18a9577a",
        "name": "",
        "topic": "from_dashboard",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "1cb494e37798adb3",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 940,
        "wires": [
            [
                "52e329c6a7b14e90",
                "6e93c1c8b7177a41"
            ]
        ]
    },
    {
        "id": "6e93c1c8b7177a41",
        "type": "function",
        "z": "09a6d2bc18a9577a",
        "name": "Convert incoming ping into readable data",
        "func": "if (msg.payload[\"end_device_type\"] === 1){\n    msg.payload[\"end_device_type\"] = \"BLE Device\";\n} else {\n    msg.payload[\"end_device_type\"] = \"Broker\";\n}\n\nif (msg.payload[\"time\"]){\n    let date = new Date(msg.payload[\"time\"]);\n    // Format: DD MMM YYYY, HH:mm:ss\n    let formattedTime = date.toLocaleString('en-GB', {\n        day: '2-digit',\n        month: 'short',\n        year: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: false\n    });\n\n    msg.payload[\"time\"] = formattedTime;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 940,
        "wires": [
            [
                "5fe73c7353141d2a"
            ]
        ]
    },
    {
        "id": "5fe73c7353141d2a",
        "type": "ui-table",
        "z": "09a6d2bc18a9577a",
        "group": "6a3ce8c651de3aef",
        "name": "Incoming Messages Display Table",
        "label": "Incoming Messages",
        "order": 1,
        "width": 0,
        "height": 0,
        "maxrows": "10",
        "passthru": false,
        "autocols": false,
        "showSearch": true,
        "selectionType": "none",
        "columns": [
            {
                "title": "Time",
                "key": "time",
                "keyType": "key",
                "type": "text",
                "width": "10",
                "align": "start"
            },
            {
                "title": "From Node",
                "key": "address",
                "keyType": "key",
                "type": "text",
                "width": "4",
                "align": "start"
            },
            {
                "title": "Device Type",
                "key": "end_device_type",
                "keyType": "key",
                "type": "text",
                "width": "10",
                "align": "start"
            },
            {
                "title": "Message",
                "key": "payload",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            }
        ],
        "mobileBreakpoint": "sm",
        "mobileBreakpointType": "defaults",
        "action": "append",
        "x": 940,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "8004cc791df266eb",
        "type": "inject",
        "z": "09a6d2bc18a9577a",
        "name": "Clear the mqtt message log",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 1800,
        "y": 620,
        "wires": [
            [
                "fe7709484c22f7c6"
            ]
        ]
    },
    {
        "id": "4fe7e7b5b3312e2b",
        "type": "function",
        "z": "09a6d2bc18a9577a",
        "name": "Last Will \"Offline\" Check",
        "func": "if (msg.topic === \"network_status\" && msg.payload === \"offline\") {\n    return {\n        topic: \"network_status\",\n        payload: []\n    };\n} else {\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 700,
        "wires": [
            [
                "91381bfaf442e7a9",
                "1ad02813dd068bc5",
                "b3f0b0d796549477"
            ]
        ]
    },
    {
        "id": "704d31afa47f7932",
        "type": "inject",
        "z": "09a6d2bc18a9577a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "network_status",
        "payload": "{\"status\":\"offline\"}",
        "payloadType": "json",
        "x": 340,
        "y": 860,
        "wires": [
            [
                "4b8fa8b4dad50ad4"
            ]
        ]
    },
    {
        "id": "a1e99bd59043cd21",
        "type": "ui-notification",
        "z": "09a6d2bc18a9577a",
        "ui": "593f6178aa696044",
        "position": "center center",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "10",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "Close",
        "allowConfirm": false,
        "confirmText": "Confirm",
        "raw": true,
        "className": "",
        "name": "Offline Alert",
        "x": 910,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "a3724a9eb98812bc",
        "type": "switch",
        "z": "09a6d2bc18a9577a",
        "name": "Filter Offline Messages for Alerts",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "offline",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 430,
        "y": 780,
        "wires": [
            [
                "303d82e0047aed83"
            ]
        ]
    },
    {
        "id": "b60c0463d43817e4",
        "type": "debug",
        "z": "09a6d2bc18a9577a",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 800,
        "wires": []
    },
    {
        "id": "303d82e0047aed83",
        "type": "function",
        "z": "09a6d2bc18a9577a",
        "name": "Disconnect Alert Msg",
        "func": "var currentDate = new Date();\nvar dateTimeStr = currentDate.getHours() + \":\" + currentDate.getMinutes() + \":\" \n+ currentDate.getSeconds() + \".\" + currentDate.getMilliseconds();\n\nreturn {\n    \"topic\": \"network_status\",\n    \"payload\": `<h3>Disconnect Alert</h3><p>Zone MQTT Broker has disconnected at ${dateTimeStr}</p>`\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 780,
        "wires": [
            [
                "a1e99bd59043cd21",
                "b60c0463d43817e4"
            ]
        ]
    },
    {
        "id": "1cb494e37798adb3",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "e92834523671ca8a",
        "type": "ui-group",
        "name": "Overall Group",
        "page": "e0eeb5cb062328b3",
        "width": 6,
        "height": "2",
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "a038e927d4093482",
        "type": "ui-group",
        "name": "Node 1234",
        "page": "5a1d25548bf241bd",
        "width": 6,
        "height": 1,
        "order": 7,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "619b22480b24dccb",
        "type": "ui-group",
        "name": "Node 4321 Group",
        "page": "5a1d25548bf241bd",
        "width": 6,
        "height": 1,
        "order": 5,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "c9e128aa2ab502c6",
        "type": "ui-group",
        "name": "A9F0",
        "page": "5a1d25548bf241bd",
        "width": 6,
        "height": 1,
        "order": 4,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "243ed2f1bc512451",
        "type": "ui-group",
        "name": "Node C001",
        "page": "5a1d25548bf241bd",
        "width": 6,
        "height": 1,
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "6a3ce8c651de3aef",
        "type": "ui-group",
        "name": "Overall Text Group",
        "page": "e0eeb5cb062328b3",
        "width": 6,
        "height": 1,
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "593f6178aa696044",
        "type": "ui-base",
        "name": "My Dashboard",
        "path": "/dashboard",
        "appIcon": "",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "headerContent": "page",
        "navigationStyle": "default",
        "titleBarStyle": "default",
        "showReconnectNotification": true,
        "notificationDisplayTime": 1,
        "showDisconnectNotification": true
    },
    {
        "id": "e0eeb5cb062328b3",
        "type": "ui-page",
        "name": "Overall Page",
        "ui": "593f6178aa696044",
        "path": "/overall",
        "icon": "home",
        "layout": "grid",
        "theme": "7f5813628e073612",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 2,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "5a1d25548bf241bd",
        "type": "ui-page",
        "name": "Nodes Page",
        "ui": "593f6178aa696044",
        "path": "/nodes",
        "icon": "home",
        "layout": "grid",
        "theme": "7f5813628e073612",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 1,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "7f5813628e073612",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094CE",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    }
]